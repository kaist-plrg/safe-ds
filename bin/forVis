#! /usr/local/bin/node

/*********************************************************************************************************
 *    Copyright (c) 2016, KAIST.
 *    All rights reserved.
 *
 *    Use is subject to license terms.
 *
 * Copyright (c) 2013 Francois Zaninotto
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*********************************************************************************************************/

/**
 * Convert a simple json object into another specifying children as an array
 * Works recursively
 *
 * example input:
 * { a: { b: { c: { size: 12 }, d: { size: 34 } }, e: { size: 56 } } }
 * example output
 * { name: a, children: [
 *   { name: b, children: [
 *     { name: c, size: 12 },
 *     { name: d, size: 34 }
 *   ] },
 *   { name: e, size: 56 }
 * ] } }
 */
var getChildren = function(json) {
  var children = [];
  if (json.language) return children;
  for (var key in json) {
    var child = { name: key };
    if (json[key].size) {
      // value node
      child.size = json[key].size;
      child.language = json[key].language;
    } else {
      // children node
      var childChildren = getChildren(json[key]);
      if (childChildren) child.children = childChildren;
    }
    children.push(child);
    delete json[key];
  }
  return children;
};

var fs = require('fs');

if (process.argv.length !== 3) {
    console.error('Exactly one argument is required.');
    process.exit(1);
}

var input = process.argv[2];
var output = 'vis/data.json';

fs.readFile(input, 'utf-8', function (err, data) {
    if (err) throw err;
    var lines = data.split("\n");
    lines.shift(); // drop the header line

    var json = {};
    lines.forEach(function(line) {
      var cols = line.split(',');
      var filename = cols[1];
      if (!filename) return;
      var elements = filename.split(/[\/\\]/);
      var current = json;
      elements.forEach(function(element) {
        if (!current[element]) {
          current[element] = {};
        }
        current = current[element];
      });
      current.language = cols[0];
      current.size = parseInt(cols[4], 10);
    });
    json = getChildren(json)[0];
    json.name = 'root';
    fs.writeFile(output, JSON.stringify(json), function (err) {
        if (err) throw err;
    });
});
