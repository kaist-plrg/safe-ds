  function buildKernel() 
  {
    var ss;
    var factor;
    var i;
    var j;
    var g;
    
      ss = sigma * sigma;
    factor = 2 * Math.PI * ss;
    kernel = [];
    kernel.push([]);
    i = 0;
    do
    {
      g = Math.exp(- (i * i) / (2 * ss)) / factor;
      if (g < 0.001)
        break;
      kernel[0].push(g);
      ++ i;
    }while (i < 7);
    kernelSize = i;
    for (j = 1;j < kernelSize;++ j)
    {
      kernel.push([]);
      for (i = 0;i < kernelSize;++ i)
      {
        g = Math.exp(- (i * i + j * j) / (2 * ss)) / factor;
        kernel[j].push(g);
      }
    }
    kernelSum = 0;
    for (j = 1 - kernelSize;j < kernelSize;++ j)
    {
      for (i = 1 - kernelSize;i < kernelSize;++ i)
      {
        kernelSum += kernel[Math.abs(j)][Math.abs(i)];
      }
    }
  }
  function gaussianBlur() 
  {
    var y;
    var x;
    var r;
    var g;
    var b;
    var a;
    var j;
    var i;
    
      {
      y = 0;
      for (;y < height;++ y)
      {
        {
          x = 0;
          for (;x < width;++ x)
          {
            {
              r = 0;
              g = 0;
              b = 0;
              a = 0;
            }
            {
              j = 1 - kernelSize;
              for (;j < kernelSize;++ j)
              {
                if (y + j < 0 || y + j >= height)
                  continue;
                {
                  i = 1 - kernelSize;
                  for (;i < kernelSize;++ i)
                  {
                    if (x + i < 0 || x + i >= width)
                      continue;
                    r += squidImageData[4 * ((y + j) * width + (x + i)) + 0] * kernel[Math.abs(j)][Math.abs(i)];
                    g += squidImageData[4 * ((y + j) * width + (x + i)) + 1] * kernel[Math.abs(j)][Math.abs(i)];
                    b += squidImageData[4 * ((y + j) * width + (x + i)) + 2] * kernel[Math.abs(j)][Math.abs(i)];
                    a += squidImageData[4 * ((y + j) * width + (x + i)) + 3] * kernel[Math.abs(j)][Math.abs(i)];
                  }
                }
              }
            }
            squidImageData[4 * (y * width + x) + 0] = r / kernelSum;
            squidImageData[4 * (y * width + x) + 1] = g / kernelSum;
            squidImageData[4 * (y * width + x) + 2] = b / kernelSum;
            squidImageData[4 * (y * width + x) + 3] = a / kernelSum;
          }
        }
      }
    }
    return squidImageData;
  }
  var squidImageData;
  var sigma;
  var kernel;
  var kernelSize;
  var kernelSum;
  var width;
  var height;
  
  squidImageData = ["A LOT!!! 427200 elements are not printed here.", ];
  sigma = 10;
  {
    
  }
  buildKernel();
  {
    width = 400;
    height = 267;
  }
  gaussianBlur();
  
