function[0] top-level {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] noop(StartOfFile)
    [1] x := 1
    [2] <>Global<>ignore2 := alloc() @ #1
    [3] <>Global<>ignore2["a"] := "A"
    [4] <>Global<>ignore2["b"] := "B"
    [5] obj := <>Global<>ignore2

  Try[1] -> [4], [3], [2]
    [0] <>obj<>2 := @ToObject(obj) @ #2

  Catch[2] -> [14], ExitExc
    [0] catch(<>e<>1)
    [1] <>Global<>ignore3 := function (1) @ #4, #5
    [2] value := <>Global<>ignore3
    [3] <>temp<>8 := 4
    [4] <>temp<>9 := 2
    [5] <>obj<>10 := @ToObject(test) @ #6
    [6] <>arguments<>11 := allocArg(0) @ #7
    [7] <>fun<>12 := @GetBase(test)
    [8] <>this<> := enterCode(<>fun<>12)

  Block[3] -> [5], [2]
    [0] assert(<>obj<>2["a"] == x)
    [1] <>obj<>3 := @ToObject(obj) @ #3
    [2] <>Global<>ignore7 := delete(<>obj<>3, "b")

  Block[4] -> [6], [2]
    [0] assert(<>obj<>2["a"] != x)

  Block[5] -> [2]
    [0] throw(x)

  LoopHead[6] -> [8], [7]

  Block[7] -> [10], [9], [2]
    [0] assert(true)
    [1] <>old<>4 := x
    [2] <>new<>5 := @ToNumber(<>old<>4)
    [3] x := <>new<>5 - 1

  Block[8] -> [13], [2]
    [0] assert(! true)

  Block[9] -> [13], [2]
    [0] assert(<>new<>5)

  Block[10] -> [11], [2]
    [0] assert(! <>new<>5)

  Block[11] -> [12]

  LCont[12] -> [6]

  LBreak[13] -> [5]

  Call[14] -> ExitExc
    [0] call(<>obj<>10, <>this<>, <>arguments<>11) @ #8

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [18], ExitExc
    [0] <>Global<>ignore4 := allocArray(3) @ #9
    [1] <>Global<>ignore4["0"] := <>temp<>8
    [2] <>Global<>ignore4["1"] := <>temp<>9
    [3] <>Global<>ignore4["2"] := <>temp<>13
    [4] arr := <>Global<>ignore4
    [5] <>Global<>ignore6 := undefined

  Finally[18] -> Exit
    [0] noop(EndOfFile)

  Exit[-2]

  ExitExc[-3]

}

function[1] value<>funexpr@12:15-14:4<> {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>e<>1)

  Exit[-2]

  ExitExc[-3]

}

