function[0] top-level {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] f := function (1) @ #6, #7
    [1] noop(StartOfFile)
    [2] <>obj<>14 := @ToObject(f) @ #8
    [3] <>temp<>15 := 1
    [4] <>temp<>16 := 2
    [5] <>temp<>17 := 3
    [6] <>arguments<>18 := allocArg(3) @ #9
    [7] <>arguments<>18["0"] := <>temp<>15
    [8] <>arguments<>18["1"] := <>temp<>16
    [9] <>arguments<>18["2"] := <>temp<>17
    [10] <>fun<>19 := @GetBase(f)
    [11] <>this<> := enterCode(<>fun<>19)

  Call[1] -> ExitExc
    [0] call(<>obj<>14, <>this<>, <>arguments<>18) @ #10

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] x := <>Global<>ignore3
    [1] noop(EndOfFile)

  Exit[-2]

  ExitExc[-3]

}

function[1] f {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>g<>4 := function (2) @ #1, #2
    [1] <>temp<>5 := <>y<>2 + <>z<>3
    [2] <>obj<>9 := @ToObject(<>g<>4) @ #3
    [3] <>temp<>10 := <>temp<>5
    [4] <>arguments<>11 := allocArg(1) @ #4
    [5] <>arguments<>11["0"] := <>temp<>10
    [6] <>fun<>12 := @GetBase(<>g<>4)
    [7] <>this<> := enterCode(<>fun<>12)

  Call[1] -> ExitExc
    [0] call(<>obj<>9, <>this<>, <>arguments<>11) @ #5

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] return(<>new1<>13)

  Exit[-2]

  ExitExc[-3]

}

function[2] g {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>test<>7 := <>test<>7 + 6
    [1] return(<>test<>7 - <>x<>1)

  Exit[-2]

  ExitExc[-3]

}

