function[0] top-level {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] f := function (1) @ #3, #4
    [1] noop(StartOfFile)
    [2] <>Global<>ignore8 := function (3) @ #5, #6
    [3] x := <>Global<>ignore8
    [4] <>obj1<>19 := function <>h<>13(4) @ #10, #11, #12
    [5] <>obj<>20 := @ToObject(<>obj1<>19) @ #13
    [6] <>temp<>21 := 3
    [7] <>arguments<>22 := allocArg(1) @ #14
    [8] <>arguments<>22["0"] := <>temp<>21
    [9] <>this<> := enterCode(<>Global<>global)

  Call[1] -> ExitExc
    [0] call(<>obj<>20, <>this<>, <>arguments<>22) @ #15

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] y := <>Global<>ignore9
    [1] noop(EndOfFile)

  Exit[-2]

  ExitExc[-3]

}

function[1] f {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := function (2) @ #1, #2
    [1] <>z<>3 := <>Global<>ignore1
    [2] return(<>z<>3)

  Exit[-2]

  ExitExc[-3]

}

function[2] g {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore3 := false
    [1] <>Global<>ignore5 := this
    [2] <>Global<>ignore7 := <>c<>5

  Exit[-2]

  ExitExc[-3]

}

function[3] x<>funexpr@5:9-35<> {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>x<>8)

  Exit[-2]

  ExitExc[-3]

}

function[4] h {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> Exit, ExitExc
    [0] assert(<>n<>11 == 0)
    [1] return(<>n<>11)

  Block[2] -> [4], ExitExc
    [0] assert(<>n<>11 != 0)
    [1] <>obj<>14 := @ToObject(<>h<>13) @ #7
    [2] <>temp<>15 := <>n<>11 - 1
    [3] <>arguments<>16 := allocArg(1) @ #8
    [4] <>arguments<>16["0"] := <>temp<>15
    [5] <>fun<>17 := @GetBase(<>h<>13)
    [6] <>this<> := enterCode(<>fun<>17)

  Block[3] -> Exit

  Call[4] -> ExitExc
    [0] call(<>obj<>14, <>this<>, <>arguments<>16) @ #9

  AfterCall[5] -> [7]

  AfterCatch[6] -> ExitExc

  Block[7] -> Exit, ExitExc
    [0] return(<>new1<>18)

  Exit[-2]

  ExitExc[-3]

}

