function[0] top-level {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] noop(StartOfFile)
    [1] <>fun<>1 := @ToObject(Date) @ #1
    [2] <>arguments<>2 := allocArg(0) @ #2
    [3] <>proto<>3 := <>fun<>1["prototype"]
    [4] <>obj<>4 := alloc(<>proto<>3) @ #3

  Call[1] -> ExitExc
    [0] construct(<>fun<>1, <>obj<>4, <>arguments<>2) @ #4

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [6], [5]
    [0] <>cond<>6 := @isObject(<>newObj<>5)

  Block[5] -> [7], ExitExc
    [0] assert(<>cond<>6)
    [1] <>Global<>ignore1 := <>newObj<>5

  Block[6] -> [7], ExitExc
    [0] assert(! <>cond<>6)
    [1] <>Global<>ignore1 := <>obj<>4

  Block[7] -> [8], ExitExc
    [0] gCurrentTestStop := <>Global<>ignore1
    [1] <>obj<>7 := @ToObject(win) @ #5
    [2] <>fun<>8 := @ToObject(<>obj<>7["TestCase"]) @ #6
    [3] <>obj<>9 := @ToObject(win) @ #7
    [4] <>temp<>10 := <>obj<>9["gTestFile"]
    [5] <>obj<>11 := @ToObject(win) @ #8
    [6] <>temp<>12 := <>obj<>11["summary"]
    [7] <>temp<>13 := "Unknown"
    [8] <>arguments<>14 := allocArg(3) @ #9
    [9] <>arguments<>14["0"] := <>temp<>10
    [10] <>arguments<>14["1"] := <>temp<>12
    [11] <>arguments<>14["2"] := <>temp<>13
    [12] <>proto<>15 := <>fun<>8["prototype"]
    [13] <>obj<>16 := alloc(<>proto<>15) @ #10

  Call[8] -> ExitExc
    [0] construct(<>fun<>8, <>obj<>16, <>arguments<>14) @ #11

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>18 := @isObject(<>newObj<>17)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>18)
    [1] <>Global<>ignore2 := <>newObj<>17

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>18)
    [1] <>Global<>ignore2 := <>obj<>16

  Block[14] -> [15], ExitExc
    [0] <>fun<>19 := @ToObject(TypeError) @ #12
    [1] <>temp<>20 := "here"
    [2] <>arguments<>21 := allocArg(1) @ #13
    [3] <>arguments<>21["0"] := <>temp<>20
    [4] <>proto<>22 := <>fun<>19["prototype"]
    [5] <>obj<>23 := alloc(<>proto<>22) @ #14

  Call[15] -> ExitExc
    [0] construct(<>fun<>19, <>obj<>23, <>arguments<>21) @ #15

  AfterCall[16] -> [18]

  AfterCatch[17] -> ExitExc

  Block[18] -> [20], [19]
    [0] <>cond<>25 := @isObject(<>newObj<>24)

  Block[19] -> [21], ExitExc
    [0] assert(<>cond<>25)
    [1] <>new1<>26 := <>newObj<>24

  Block[20] -> [21], ExitExc
    [0] assert(! <>cond<>25)
    [1] <>new1<>26 := <>obj<>23

  Block[21] -> ExitExc
    [0] throw(<>new1<>26)

  Block[22] -> [23], ExitExc
    [0] <>fun1<>33 := function (1) @ #19, #20
    [1] <>fun<>34 := @ToObject(<>fun1<>33) @ #21
    [2] <>arguments<>35 := allocArg(0) @ #22
    [3] <>proto<>36 := <>fun<>34["prototype"]
    [4] <>obj<>37 := alloc(<>proto<>36) @ #23

  Call[23] -> ExitExc
    [0] construct(<>fun<>34, <>obj<>37, <>arguments<>35) @ #24

  AfterCall[24] -> [26]

  AfterCatch[25] -> ExitExc

  Block[26] -> [28], [27]
    [0] <>cond<>39 := @isObject(<>newObj<>38)

  Block[27] -> [29], ExitExc
    [0] assert(<>cond<>39)
    [1] <>Global<>ignore3 := <>newObj<>38

  Block[28] -> [29], ExitExc
    [0] assert(! <>cond<>39)
    [1] <>Global<>ignore3 := <>obj<>37

  Block[29] -> Exit, ExitExc
    [0] myfunction := <>Global<>ignore3
    [1] noop(EndOfFile)

  Exit[-2]

  ExitExc[-3]

}

function[1] <>funexpr@4:22-10:2<> {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>obj<>28 := @ToObject(this) @ #16
    [1] <>Global<>ignore4 := function (2) @ #17, #18
    [2] <>obj<>28["valueOf"] := <>Global<>ignore4

  Exit[-2]

  ExitExc[-3]

}

function[2] this.valueOf<>funexpr@6:18-9:4<> {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>old<>30 := actual
    [1] actual := <>old<>30 + "this.valueOf called. "

  Exit[-2]

  ExitExc[-3]

}

