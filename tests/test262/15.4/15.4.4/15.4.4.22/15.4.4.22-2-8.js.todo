  function testcase() 
  {
    var accessed = false;
    function callbackfn(prevVal, curVal, idx, obj) 
    {
      accessed = true;
      return obj.length === 2;
    }
    var proto = {
      length : 3
    };
    var Con = (function () 
    {
      
    });
    Con.prototype = proto;
    var child = new Con();
    Object.defineProperty(child, "length", {
      get : (function () 
      {
        return 2;
      }),
      configurable : true
    });
    child[0] = 12;
    child[1] = 11;
    child[2] = 9;
    return Array.prototype.reduceRight.call(child, callbackfn, 11) && accessed;
  }
  {
    var __result1 = testcase();
    var __expect1 = true;
  }
  