/**
 * *****************************************************************************
 * Copyright (c) 2016-2018, KAIST.
 * All rights reserved.
 *
 * Use is subject to license terms.
 *
 * This distribution may include materials developed by third parties.
 * ****************************************************************************
 */

/*
 * A.3 Expressions
 * Definition of JavaScript expressions
 */
module kr.ac.kaist.safe.parser.ExpressionNoIn(Declaration, Expression, Literal,
                                              Symbol, Identifier, Keyword, Spacing);

import Declaration;
import Expression;
import Literal;
import Symbol;
import Identifier;
import Keyword;
import Spacing;

/*
 * ExpressionNoIn ::= AssignmentNoIn (w , w AssignmentNoIn)*
 */
public Expr ExpressionNoIn =
     a1:AssignmentNoIn a2s:(w void:comma w AssignmentNoIn)*
     { if (a2s.list().isEmpty()) yyValue = a1;
       else yyValue = new ExprList(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount)),
                                   toList(cons(a1, a2s.list())));
     };

/*
 * AssignmentNoIn ::=
 *   ConditionalNoIn
 * | LeftHandSide w = w AssignmentNoIn
 * | LeftHandSide w AssignmentOp w AssignmentNoIn
 */
Expr AssignmentNoIn =
     a1:LeftHandSide w a2:equals w a3:AssignmentNoIn
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new AssignOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2, a3);
     }
   / a1:LeftHandSide w a2:AssignmentOp w a3:AssignmentNoIn
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new AssignOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2, a3);
     }
   / ConditionalNoIn;

/*
 * ConditionalNoIn ::=
 *   LogicalORNoIn
 * | LogicalORNoIn w ? w Assignment w : w AssignmentNoIn
 */
private transient Expr ConditionalNoIn =
     a1:LogicalORNoIn w question w a2:Assignment w colon w a3:AssignmentNoIn
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new Cond(NodeUtil.makeASTNodeInfo(span), a1, a2, a3);
     }
   / LogicalORNoIn ;

/*
 * LogicalORNoIn ::=
 *   LogicalANDNoIn
 * | LogicalORNoIn w || w LogicalANDNoIn
 */
private transient Expr LogicalORNoIn =
     a1:LogicalANDNoIn a2s:LogicalANDNoInR*
     { Span span = a1.span();
       yyValue = a1;
       for (Tuple2<Op, Expr> pair: a2s.list()) {
           Op op = pair._1();
           Expr right = pair._2();
           yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, right.span())),
                                    yyValue, op, right);
       }
     };

private transient Tuple2<Op, Expr> LogicalANDNoInR =
     w a1:bars w a2:LogicalANDNoIn
     { yyValue = new Tuple2<Op, Expr>(a1, a2); };

/*
 * LogicalANDNoIn ::=
 *   BitwiseORNoIn
 * | LogicalANDNoIn w && w BitwiseORNoIn
 */
private transient Expr LogicalANDNoIn =
     a1:BitwiseORNoIn a2s:BitwiseORNoInR*
     { Span span = a1.span();
       yyValue = a1;
       for (Tuple2<Op, Expr> pair: a2s.list()) {
           Op op = pair._1();
           Expr right = pair._2();
           yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, right.span())),
                                    yyValue, op, right);
       }
     };

private transient Tuple2<Op, Expr> BitwiseORNoInR =
     w a1:ands w a2:BitwiseORNoIn
     { yyValue = new Tuple2<Op, Expr>(a1, a2); };

/*
 * BitwiseORNoIn ::=
 *   BitwiseXORNoIn
 * | BitwiseORNoIn w | w BitwiseXORNoIn
 */
private transient Expr BitwiseORNoIn =
     a1:BitwiseXORNoIn a2s:BitwiseXORNoInR*
     { Span span = a1.span();
       yyValue = a1;
       for (Tuple2<Op, Expr> pair: a2s.list()) {
           Op op = pair._1();
           Expr right = pair._2();
           yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, right.span())),
                                    yyValue, op, right);
       }
     };

private transient Tuple2<Op, Expr> BitwiseXORNoInR =
     w a1:bar w a2:BitwiseXORNoIn
     { yyValue = new Tuple2<Op, Expr>(a1, a2); };

/*
 * BitwiseXORNoIn ::=
 *   BitwiseANDNoIn
 * | BitwiseXORNoIn w ^ w BitwiseANDNoIn
 */
private transient Expr BitwiseXORNoIn =
     a1:BitwiseANDNoIn a2s:BitwiseANDNoInR*
     { Span span = a1.span();
       yyValue = a1;
       for (Tuple2<Op, Expr> pair: a2s.list()) {
           Op op = pair._1();
           Expr right = pair._2();
           yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, right.span())),
                                    yyValue, op, right);
       }
     };

private transient Tuple2<Op, Expr> BitwiseANDNoInR =
     w a1:caret w a2:BitwiseANDNoIn
     { yyValue = new Tuple2<Op, Expr>(a1, a2); };

/*
 * BitwiseANDNoIn ::=
 *   EqualityNoIn
 * | BitwiseANDNoIn w & w EqualityNoIn
 */
private transient Expr BitwiseANDNoIn =
     a1:EqualityNoIn a2s:EqualityNoInR*
     { Span span = a1.span();
       yyValue = a1;
       for (Tuple2<Op, Expr> pair: a2s.list()) {
           Op op = pair._1();
           Expr right = pair._2();
           yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, right.span())),
                                    yyValue, op, right);
       }
     };

private transient Tuple2<Op, Expr> EqualityNoInR =
     w a1:and w a2:EqualityNoIn
     { yyValue = new Tuple2<Op, Expr>(a1, a2); };

/*
 * EqualityNoIn ::=
 *   RelationalNoIn
 * | EqualityNoIn w == w RelationalNoIn
 * | EqualityNoIn w != w RelationalNoIn
 * | EqualityNoIn w StrictEquals w RelationalNoIn
 * | EqualityNoIn w !== w RelationalNoIn
 */
private transient Expr EqualityNoIn =
     a1:RelationalNoIn a2s:RelationalRNoIn*
     { Span span = a1.span();
       yyValue = a1;
       for (Tuple2<Op, Expr> pair: a2s.list()) {
           Op op = pair._1();
           Expr right = pair._2();
           yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, right.span())),
                                    yyValue, op, right);
       }
     };

private transient Tuple2<Op, Expr> RelationalRNoIn =
     w a1:EqualityOp w a2:RelationalNoIn
     { yyValue = new Tuple2<Op, Expr>(a1, a2); };

/*
 * RelationalNoIn ::=
 *   Shift
 * | RelationalNoIn w < w Shift
 * | RelationalNoIn w > w Shift
 * | RelationalNoIn w <= w Shift
 * | RelationalNoIn w >= w Shift
 * | RelationalNoIn w instanceof w Shift
 */
private transient Expr RelationalNoIn =
     a1s:ShiftLNoIn+ a2:Shift
     { List<Tuple2<Expr, Op>> ps = a1s.list();
       Tuple2<Expr, Op> first = ps.remove(0);
       Expr left = first._1();
       Op op = first._2();
       Span span = left.span();
       for (Tuple2<Expr, Op> pair: ps) {
           Expr e = pair._1();
           left = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, e.span())),
                                 left, op, e);
           op = pair._2();
       }
       yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount)), left, op, a2);
     }
   / Shift ;

private transient Tuple2<Expr, Op> ShiftLNoIn =
     a1:Shift w a2:RelationalOpNoIn w
     { yyValue = new Tuple2<Expr, Op>(a1, a2); };
